# coding: utf-8

"""
    IronFunctions

    The open source serverless platform.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Task(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, image=None, payload=None, group_name=None, error=None, reason=None, created_at=None, started_at=None, completed_at=None, retry_of=None, retry_at=None, env_vars=None):
        """
        Task - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'image': 'str',
            'payload': 'str',
            'group_name': 'str',
            'error': 'str',
            'reason': 'str',
            'created_at': 'datetime',
            'started_at': 'datetime',
            'completed_at': 'datetime',
            'retry_of': 'str',
            'retry_at': 'str',
            'env_vars': 'dict(str, str)'
        }

        self.attribute_map = {
            'image': 'image',
            'payload': 'payload',
            'group_name': 'group_name',
            'error': 'error',
            'reason': 'reason',
            'created_at': 'created_at',
            'started_at': 'started_at',
            'completed_at': 'completed_at',
            'retry_of': 'retry_of',
            'retry_at': 'retry_at',
            'env_vars': 'env_vars'
        }

        self._image = image
        self._payload = payload
        self._group_name = group_name
        self._error = error
        self._reason = reason
        self._created_at = created_at
        self._started_at = started_at
        self._completed_at = completed_at
        self._retry_of = retry_of
        self._retry_at = retry_at
        self._env_vars = env_vars


    @property
    def image(self):
        """
        Gets the image of this Task.
        Name of Docker image to use. This is optional and can be used to override the image defined at the group level.

        :return: The image of this Task.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this Task.
        Name of Docker image to use. This is optional and can be used to override the image defined at the group level.

        :param image: The image of this Task.
        :type: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def payload(self):
        """
        Gets the payload of this Task.
        Payload for the task. This is what you pass into each task to make it do something.

        :return: The payload of this Task.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """
        Sets the payload of this Task.
        Payload for the task. This is what you pass into each task to make it do something.

        :param payload: The payload of this Task.
        :type: str
        """

        self._payload = payload

    @property
    def group_name(self):
        """
        Gets the group_name of this Task.
        Group this task belongs to.

        :return: The group_name of this Task.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name of this Task.
        Group this task belongs to.

        :param group_name: The group_name of this Task.
        :type: str
        """

        self._group_name = group_name

    @property
    def error(self):
        """
        Gets the error of this Task.
        The error message, if status is 'error'. This is errors due to things outside the task itself. Errors from user code will be found in the log.

        :return: The error of this Task.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this Task.
        The error message, if status is 'error'. This is errors due to things outside the task itself. Errors from user code will be found in the log.

        :param error: The error of this Task.
        :type: str
        """

        self._error = error

    @property
    def reason(self):
        """
        Gets the reason of this Task.
        Machine usable reason for task being in this state. Valid values for error status are `timeout | killed | bad_exit`. Valid values for cancelled status are `client_request`. For everything else, this is undefined. 

        :return: The reason of this Task.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this Task.
        Machine usable reason for task being in this state. Valid values for error status are `timeout | killed | bad_exit`. Valid values for cancelled status are `client_request`. For everything else, this is undefined. 

        :param reason: The reason of this Task.
        :type: str
        """
        allowed_values = ["timeout", "killed", "bad_exit", "client_request"]
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def created_at(self):
        """
        Gets the created_at of this Task.
        Time when task was submitted. Always in UTC.

        :return: The created_at of this Task.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Task.
        Time when task was submitted. Always in UTC.

        :param created_at: The created_at of this Task.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def started_at(self):
        """
        Gets the started_at of this Task.
        Time when task started execution. Always in UTC.

        :return: The started_at of this Task.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """
        Sets the started_at of this Task.
        Time when task started execution. Always in UTC.

        :param started_at: The started_at of this Task.
        :type: datetime
        """

        self._started_at = started_at

    @property
    def completed_at(self):
        """
        Gets the completed_at of this Task.
        Time when task completed, whether it was successul or failed. Always in UTC.

        :return: The completed_at of this Task.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """
        Sets the completed_at of this Task.
        Time when task completed, whether it was successul or failed. Always in UTC.

        :param completed_at: The completed_at of this Task.
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def retry_of(self):
        """
        Gets the retry_of of this Task.
        If this field is set, then this task is a retry of the ID in this field.

        :return: The retry_of of this Task.
        :rtype: str
        """
        return self._retry_of

    @retry_of.setter
    def retry_of(self, retry_of):
        """
        Sets the retry_of of this Task.
        If this field is set, then this task is a retry of the ID in this field.

        :param retry_of: The retry_of of this Task.
        :type: str
        """

        self._retry_of = retry_of

    @property
    def retry_at(self):
        """
        Gets the retry_at of this Task.
        If this field is set, then this task was retried by the task referenced in this field.

        :return: The retry_at of this Task.
        :rtype: str
        """
        return self._retry_at

    @retry_at.setter
    def retry_at(self, retry_at):
        """
        Sets the retry_at of this Task.
        If this field is set, then this task was retried by the task referenced in this field.

        :param retry_at: The retry_at of this Task.
        :type: str
        """

        self._retry_at = retry_at

    @property
    def env_vars(self):
        """
        Gets the env_vars of this Task.
        Env vars for the task. Comes from the ones set on the Group.

        :return: The env_vars of this Task.
        :rtype: dict(str, str)
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """
        Sets the env_vars of this Task.
        Env vars for the task. Comes from the ones set on the Group.

        :param env_vars: The env_vars of this Task.
        :type: dict(str, str)
        """

        self._env_vars = env_vars

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
