# coding: utf-8

"""
    IronFunctions

    The open source serverless platform.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Route(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, app_name=None, path=None, image=None, headers=None, memory=None, type=None, config=None):
        """
        Route - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'app_name': 'str',
            'path': 'str',
            'image': 'str',
            'headers': 'str',
            'memory': 'int',
            'type': 'str',
            'config': 'dict(str, str)'
        }

        self.attribute_map = {
            'app_name': 'app_name',
            'path': 'path',
            'image': 'image',
            'headers': 'headers',
            'memory': 'memory',
            'type': 'type',
            'config': 'config'
        }

        self._app_name = app_name
        self._path = path
        self._image = image
        self._headers = headers
        self._memory = memory
        self._type = type
        self._config = config


    @property
    def app_name(self):
        """
        Gets the app_name of this Route.
        App this route belongs to.

        :return: The app_name of this Route.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """
        Sets the app_name of this Route.
        App this route belongs to.

        :param app_name: The app_name of this Route.
        :type: str
        """

        self._app_name = app_name

    @property
    def path(self):
        """
        Gets the path of this Route.
        URL path that will be matched to this route

        :return: The path of this Route.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this Route.
        URL path that will be matched to this route

        :param path: The path of this Route.
        :type: str
        """

        self._path = path

    @property
    def image(self):
        """
        Gets the image of this Route.
        Name of Docker image to use in this route. You should include the image tag, which should be a version number, to be more accurate. Can be overridden on a per route basis with route.image.

        :return: The image of this Route.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this Route.
        Name of Docker image to use in this route. You should include the image tag, which should be a version number, to be more accurate. Can be overridden on a per route basis with route.image.

        :param image: The image of this Route.
        :type: str
        """

        self._image = image

    @property
    def headers(self):
        """
        Gets the headers of this Route.
        Map of http headers that will be sent with the response

        :return: The headers of this Route.
        :rtype: str
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """
        Sets the headers of this Route.
        Map of http headers that will be sent with the response

        :param headers: The headers of this Route.
        :type: str
        """

        self._headers = headers

    @property
    def memory(self):
        """
        Gets the memory of this Route.
        Max usable memory for this route (MiB).

        :return: The memory of this Route.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this Route.
        Max usable memory for this route (MiB).

        :param memory: The memory of this Route.
        :type: int
        """

        self._memory = memory

    @property
    def type(self):
        """
        Gets the type of this Route.
        Route type

        :return: The type of this Route.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Route.
        Route type

        :param type: The type of this Route.
        :type: str
        """
        allowed_values = ["sync", "async"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def config(self):
        """
        Gets the config of this Route.
        Route configuration - overrides application configuration

        :return: The config of this Route.
        :rtype: dict(str, str)
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this Route.
        Route configuration - overrides application configuration

        :param config: The config of this Route.
        :type: dict(str, str)
        """

        self._config = config

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
